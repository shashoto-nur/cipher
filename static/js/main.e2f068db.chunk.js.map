{"version":3,"sources":["reportWebVitals.ts","utils/deriveKey.ts","utils/encryptFile.ts","utils/decryptFile.ts","components/Encryptor.tsx","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","deriveKey","passkey","a","window","crypto","subtle","importKey","TextEncoder","encode","passwordKey","key","getKey","console","log","message","fileToByteArray","file","Promise","resolve","_reject","fileByteArray","reader","FileReader","readAsArrayBuffer","onloadend","event","target","readyState","DONE","arrayBuffer","result","Uint8Array","err","encryptData","data","encrypting","algorithm","name","iv","encrypt","encryptedData","uint8ArrayData","stringData","String","fromCharCode","apply","slice","call","encryptedBase64Data","btoa","encryptFile","filename","fileBytesArray","encryptedFileData","encodedFilename","encryptedName","binFile","Blob","type","saveAs","getFileData","onload","decryptData","decrypt","filteredData","replace","decodedBase64Filename","atob","uint8ArrayFilename","map","char","charCodeAt","decryptedName","originalFilename","TextDecoder","decode","extension","exec","decryptFile","fileUint8Array","decryptedFileData","originalName","originalFile","Encryptor","useState","setFile","setFilename","setPasskey","onSubmit","preventDefault","htmlFor","id","onChange","files","value","placeholder","onClick","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2f068db.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const deriveKey = async (passkey: string) =>\r\n{\r\n    try\r\n    {\r\n        // Create a PBKDF2 \"key\" containing the password\r\n        const passwordKey = await window.crypto.subtle.importKey(\r\n                \"raw\", new TextEncoder().encode(passkey),\r\n                {\"name\": \"PBKDF2\"}, false, [\"deriveKey\"]\r\n        );\r\n\r\n        // Derive a key from the password key\r\n        const getKey = (passwordKey: CryptoKey) =>\r\n        {\r\n            return window.crypto.subtle.deriveKey(\r\n                { \"name\": \"PBKDF2\", \"salt\": new TextEncoder().encode('salt'), \"iterations\": 1000, \"hash\": 'SHA-256' },\r\n                passwordKey,\r\n                {\"name\": \"AES-GCM\", \"length\": 128},\r\n                true,\r\n                [\"encrypt\", \"decrypt\"]\r\n            );\r\n        };\r\n\r\n        const key = getKey(passwordKey);\r\n        return key;\r\n    }\r\n    catch (err) { console.log(err.message); };\r\n};\r\n\r\nexport default deriveKey;","import { saveAs } from 'file-saver';\r\nimport deriveKey from 'utils/deriveKey';\r\n\r\nconst fileToByteArray = (file: \"\" | File) =>\r\n{\r\n    return new Promise((resolve, _reject) =>\r\n    {\r\n        try\r\n        {\r\n            const reader = new FileReader();\r\n            let fileByteArray: Uint8Array;\r\n\r\n            reader.readAsArrayBuffer(file as Blob);\r\n            reader.onloadend = (event) =>\r\n            {\r\n                if (event.target && event.target.readyState === FileReader.DONE)\r\n                {\r\n                    const arrayBuffer = event.target.result;\r\n                    fileByteArray = new Uint8Array(arrayBuffer as ArrayBufferLike);\r\n                };\r\n                resolve(fileByteArray);\r\n            }\r\n        }\r\n        catch (err) { console.log(err.message); };\r\n    });\r\n};\r\n\r\nconst encryptData = async (data: Uint8Array, encrypting: string, key: CryptoKey | undefined) =>\r\n{\r\n    try\r\n    {\r\n        const algorithm = { name: \"AES-GCM\", iv: new TextEncoder().encode(\"Initialization Vector\") };\r\n        \r\n        const encryptedData = key && await window.crypto.subtle.encrypt( algorithm, key, data );\r\n\r\n        const uint8ArrayData = new Uint8Array(encryptedData as ArrayBufferLike);\r\n\r\n        if(encrypting === 'file') return uint8ArrayData;\r\n        \r\n        const stringData = String.fromCharCode.apply(null, [].slice.call(uint8ArrayData));\r\n        const encryptedBase64Data = btoa(stringData);\r\n\r\n        return encryptedBase64Data;\r\n    }\r\n    catch (err) { console.log(err.message); };\r\n}\r\n\r\nconst encryptFile = async (file: \"\" | File, filename: string, passkey: string) =>\r\n  {\r\n    try\r\n    {\r\n      (async () =>\r\n        {\r\n            const key = await deriveKey(passkey);\r\n\r\n            const fileBytesArray = await fileToByteArray(file);\r\n            const encryptedFileData = await encryptData(fileBytesArray as Uint8Array, 'file', key);\r\n\r\n            const encodedFilename = new TextEncoder().encode(filename);\r\n            const encryptedName = await encryptData(encodedFilename, 'name', key);\r\n\r\n            const binFile = new Blob([encryptedFileData as BlobPart], { type: 'application/octet-stream' });\r\n            saveAs(binFile, `${ encryptedName }`);\r\n        }\r\n      )();\r\n    }\r\n    catch (err) { console.log(err.message); };\r\n  };\r\n\r\nexport default encryptFile;","import { saveAs } from 'file-saver';\r\nimport deriveKey from 'utils/deriveKey';\r\n\r\nconst getFileData = (file: \"\" | File) =>\r\n{\r\n    return new Promise((resolve, _reject) =>\r\n    {\r\n        try\r\n        {\r\n            let reader = new FileReader();\r\n\r\n            reader.readAsArrayBuffer(file as Blob);\r\n            reader.onload = (event) => { event.target && resolve(event.target.result) };\r\n        }\r\n        catch (err) { console.log(err.message); };\r\n    });\r\n};\r\n\r\nconst decryptData = async (data: Uint8Array | string, key: CryptoKey | undefined) =>\r\n{\r\n    try {\r\n        const algorithm = { name: \"AES-GCM\", iv: new TextEncoder().encode(\"Initialization Vector\") };\r\n\r\n        if(typeof data !== 'string') return key && await window.crypto.subtle.decrypt(algorithm, key, data);\r\n\r\n        const filteredData = data.replace('_', '/');\r\n\r\n        const decodedBase64Filename = atob(filteredData);\r\n        const uint8ArrayFilename = new Uint8Array(\r\n          [...decodedBase64Filename].map(\r\n            (char) => char.charCodeAt(0)\r\n          )\r\n        );\r\n\r\n        const decryptedName = key && await window.crypto.subtle.decrypt(algorithm, key, uint8ArrayFilename)\r\n        const originalFilename = new TextDecoder().decode(decryptedName);\r\n\r\n        return originalFilename;\r\n    }\r\n    catch(err)\r\n    {\r\n        console.log(err.message);\r\n\r\n        const extension = typeof data === 'string' && /[^.]*$/.exec(data)![0];\r\n        return `original_name_could_not_be_recovered.${ extension }`;\r\n    };\r\n};\r\n\r\nconst decryptFile = async (file: \"\" | File, filename: string, passkey: string) =>\r\n  {\r\n    try\r\n    {\r\n      (async () =>\r\n        {\r\n            const key = await deriveKey(passkey);\r\n\r\n            const fileUint8Array = await getFileData(file);\r\n            const decryptedFileData = await decryptData(fileUint8Array as Uint8Array, key);\r\n\r\n            const originalName = await decryptData(filename, key);\r\n\r\n            const originalFile = new Blob( [decryptedFileData as BlobPart] );\r\n            saveAs(originalFile, originalName as string);\r\n        }\r\n      )();\r\n    }\r\n    catch (err) { console.log(err.message); };\r\n  };\r\n\r\nexport default decryptFile;","import React, { useState } from 'react';\r\n\r\nimport encryptFile from 'utils/encryptFile';\r\nimport decryptFile from 'utils/decryptFile';\r\n\r\nconst Encryptor = () =>\r\n  {\r\n    const [file, setFile] = useState<\"\" | File>('');\r\n    const [filename, setFilename] = useState('Choose A File');\r\n    const [passkey, setPasskey] = useState('Enter A Passkey');\r\n\r\n    const onFileChange = (event: React.ChangeEvent<HTMLInputElement>) =>\r\n    {\r\n        setFile(event?.target?.files![0] ? event.target.files![0] : '');\r\n        setFilename(event?.target?.files![0] ? event.target.files![0].name : 'Choose File');\r\n    };\r\n\r\n    const onKeyChange = (event: React.ChangeEvent<HTMLInputElement>) => { setPasskey(event.target.value); };\r\n\r\n    const encrypt = () => { encryptFile(file, filename, passkey); };\r\n    const decrypt = () => { decryptFile(file, filename, passkey); };\r\n\r\n    return (\r\n      <>\r\n        <h1> Encryptor </h1>\r\n        <br /><hr /><br />\r\n\r\n        <form onSubmit={ (event) => event.preventDefault() }>\r\n          <div>\r\n            <label htmlFor=\"file\">File: </label>\r\n            <input type='file' id=\"file\" name=\"file\" onChange={ onFileChange } />\r\n            <br />\r\n\r\n            <label htmlFor=\"key\">Passkey: </label>\r\n            <input type='text' id=\"key\" name=\"key\" onChange={ onKeyChange } placeholder={ passkey } />\r\n          </div>\r\n\r\n          <input type='button' value='Encrypt' onClick={ encrypt } />\r\n          <input type='button' value='Decrypt' onClick={ decrypt } />\r\n        </form>\r\n\r\n        <br />\r\n      </>\r\n    );\r\n  };\r\n\r\nexport default Encryptor;","\nimport Encryptor from 'components/Encryptor';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Encryptor />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport reportWebVitals from 'reportWebVitals';\n\nimport 'index.css';\nimport App from 'App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}