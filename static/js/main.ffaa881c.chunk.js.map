{"version":3,"sources":["reportWebVitals.ts","logo.svg","utils/deriveKey.ts","utils/encryptFile.ts","utils/decryptFile.ts","components/Cipher.tsx","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","deriveKey","passkey","a","window","crypto","subtle","importKey","TextEncoder","encode","passwordKey","key","getKey","message","console","log","alert","fileToByteArray","file","Promise","resolve","_reject","fileByteArray","reader","FileReader","readAsArrayBuffer","onloadend","event","target","readyState","DONE","arrayBuffer","result","Uint8Array","encryptData","fileArray","filenameArray","algorithm","name","iv","mergedArray","length","encrypt","encryptedMergedData","uint8MergedData","filename","Math","random","toString","substring","encryptFile","encryptedData","binFile","Blob","type","saveAs","getFileData","onload","decryptData","decrypt","decryptedMergedArray","uint8MergedArray","border","slice","fileData","TextDecoder","decode","decryptFile","decryptedData","originalFile","Cipher","useState","setFile","setFilename","setPasskey","src","logo","className","alt","onSubmit","preventDefault","htmlFor","id","onChange","files","value","placeholder","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffaa881c.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\r\n\r\nconst deriveKey = async (passkey: string) =>\r\n{\r\n    try\r\n    {\r\n        // Create a PBKDF2 \"key\" containing the password\r\n        const passwordKey = await window.crypto.subtle.importKey(\r\n                \"raw\", new TextEncoder().encode(passkey),\r\n                {\"name\": \"PBKDF2\"}, false, [\"deriveKey\"]\r\n        );\r\n\r\n        // Derive a key from the password key\r\n        const getKey = (passwordKey: CryptoKey) =>\r\n        {\r\n            return window.crypto.subtle.deriveKey(\r\n                {\r\n                    \"name\": \"PBKDF2\", \"salt\": new TextEncoder().encode('salt'),\r\n                    \"iterations\": 1000, \"hash\": 'SHA-256'\r\n                },\r\n                passwordKey,\r\n                { \"name\": \"AES-GCM\", \"length\": 128 },\r\n                true,\r\n                [ \"encrypt\", \"decrypt\" ]\r\n            );\r\n        };\r\n\r\n        const key = getKey(passwordKey);\r\n\r\n        return key;\r\n    }\r\n    catch ({ message })\r\n    {\r\n        console.log(message);\r\n        alert('Operation failed! Please try again...');\r\n    };\r\n};\r\n\r\n\r\nexport default deriveKey;","import { saveAs } from 'file-saver';\r\nimport deriveKey from 'utils/deriveKey';\r\n\r\n\r\n// Get the byte array of the file before encrypting\r\nconst fileToByteArray = (file: File) =>\r\n{\r\n    return new Promise((resolve, _reject) =>\r\n    {\r\n        try\r\n        {\r\n            const reader = new FileReader();\r\n            let fileByteArray: Uint8Array;\r\n\r\n            reader.readAsArrayBuffer(file as Blob);\r\n            reader.onloadend = (event) =>\r\n            {\r\n                if (event.target && event.target.readyState === FileReader.DONE)\r\n                {\r\n                    const arrayBuffer = event.target.result;\r\n                    fileByteArray = new Uint8Array(arrayBuffer as ArrayBufferLike);\r\n                };\r\n                resolve(fileByteArray);\r\n            }\r\n        }\r\n        catch ({ message })\r\n        {\r\n            console.log(message);\r\n            alert('Operation failed! Please try again...');\r\n        };\r\n    });\r\n};\r\n\r\n// Encrypt the merged array of file and filename\r\nconst encryptData = async (fileArray: Uint8Array, filenameArray: Uint8Array, key: CryptoKey | undefined) =>\r\n{\r\n    try\r\n    {\r\n        // The algorithm to encrypt the file using webcrtpto\r\n        const algorithm = { name: \"AES-GCM\", iv: new TextEncoder().encode(\"Initialization Vector\") };\r\n      \r\n        const mergedArray = new Uint8Array([...[filenameArray.length], ...filenameArray, ...fileArray]);\r\n        const encryptedMergedData = key && await window.crypto.subtle.encrypt( algorithm, key, mergedArray );\r\n        const uint8MergedData = new Uint8Array(encryptedMergedData as ArrayBufferLike);\r\n\r\n        // Generate a random filename\r\n        const filename = Math.random().toString(36).substring(2);\r\n\r\n        return { uint8MergedData: uint8MergedData!, filename: filename! };\r\n    }\r\n    catch ({ message })\r\n    {\r\n        console.log(message);\r\n        alert('Operation failed! Please try again...');\r\n    };\r\n};\r\n\r\n\r\n// Encrypt the provided file along with its name\r\nconst encryptFile = async (file: File, filename: string, passkey: string) =>\r\n{\r\n    try\r\n    {\r\n        (async () =>\r\n            {\r\n                const key = await deriveKey(passkey);\r\n\r\n                const fileArray = await fileToByteArray(file);\r\n                const filenameArray = new TextEncoder().encode(filename);\r\n                const encryptedData = await encryptData(fileArray as Uint8Array, filenameArray, key);\r\n\r\n                if(encryptedData)\r\n                {\r\n                    const { uint8MergedData, filename } = encryptedData;\r\n\r\n                    const binFile = new Blob([uint8MergedData as BlobPart], { type: 'application/octet-stream' });\r\n                    saveAs(binFile, filename);\r\n                };\r\n            }\r\n        )();\r\n    }\r\n    catch ({ message })\r\n    {\r\n        console.log(message);\r\n        alert('Operation failed! Please try again...');\r\n    };\r\n};\r\n\r\n\r\nexport default encryptFile;","import { saveAs } from 'file-saver';\r\nimport deriveKey from 'utils/deriveKey';\r\n\r\n\r\n// Get the binary file data\r\nconst getFileData = (file: File) =>\r\n{\r\n    return new Promise((resolve, _reject) =>\r\n    {\r\n        try\r\n        {\r\n            let reader = new FileReader();\r\n            reader.readAsArrayBuffer(file as Blob);\r\n            reader.onload = (event) => { event.target && resolve(event.target.result) };\r\n        }\r\n        catch ({ message })\r\n        {\r\n            console.log(message);\r\n            alert('Operation failed! Please try again...');\r\n        };\r\n    });\r\n};\r\n\r\n// Decrypt the file and get the filename and file data\r\nconst decryptData = async (uint8MergedData: Uint8Array, key: CryptoKey | undefined) =>\r\n{\r\n    try\r\n    {\r\n        // The algorithm to encrypt the file using webcrtpto\r\n        const algorithm = { name: \"AES-GCM\", iv: new TextEncoder().encode(\"Initialization Vector\") };\r\n\r\n        const decryptedMergedArray = key && await window.crypto.subtle.decrypt(algorithm, key, uint8MergedData);\r\n\r\n        if(decryptedMergedArray) {\r\n            const uint8MergedArray = new Uint8Array(decryptedMergedArray);\r\n            const border = uint8MergedArray[0] + 1;\r\n\r\n            const filenameArray = uint8MergedArray.slice(1, border);\r\n            const fileData = uint8MergedArray.slice(border, uint8MergedArray.length);\r\n            const filename = new TextDecoder().decode(filenameArray);\r\n\r\n            return { fileData: fileData!, filename: filename! };\r\n        };\r\n    }\r\n    catch ({ message })\r\n    {\r\n        console.log(message);\r\n        alert('Operation failed! Please try again...');\r\n    };\r\n};\r\n\r\n\r\n// Get the encrypted data, decrypt it and save it in its former state\r\nconst decryptFile = async (file: File, passkey: string) =>\r\n{\r\n    try\r\n    {\r\n        (async () =>\r\n            {\r\n                const key = await deriveKey(passkey);\r\n\r\n                const uint8MergedData = await getFileData(file);\r\n                const decryptedData = await decryptData(uint8MergedData as Uint8Array, key);\r\n\r\n                if(decryptedData) {\r\n                    const originalFile = new Blob( [decryptedData.fileData as BlobPart] );\r\n                    saveAs(originalFile, decryptedData.filename);\r\n                };\r\n            }\r\n        )();\r\n    }\r\n    catch ({ message })\r\n    {\r\n        console.log(message);\r\n        alert('Operation failed! Please try again...');\r\n    };\r\n};\r\n\r\n\r\nexport default decryptFile;","\r\nimport React, { useState } from 'react';\r\n\r\nimport logo from 'logo.svg';\r\nimport encryptFile from 'utils/encryptFile';\r\nimport decryptFile from 'utils/decryptFile';\r\n\r\n\r\nconst Cipher = () =>\r\n  {\r\n    const [file, setFile] = useState<\"\" | File>('');\r\n    const [filename, setFilename] = useState('Choose A File');\r\n    const [passkey, setPasskey] = useState('Enter A Passkey');\r\n\r\n    const onFileChange = (event: React.ChangeEvent<HTMLInputElement>) =>\r\n    {\r\n        if(event?.target?.files![0]) {\r\n            setFile(event.target.files![0]);\r\n            setFilename(event.target.files![0].name);\r\n        };\r\n    };\r\n\r\n    const onKeyChange = (event: React.ChangeEvent<HTMLInputElement>) => { setPasskey(event.target.value); };\r\n\r\n    const encrypt = () =>\r\n    {\r\n        if(file !== '' && passkey !== 'Enter A Passkey') encryptFile(file, filename, passkey);\r\n        else alert('Please provide a file and a passkey in order to encrypt!');\r\n    };\r\n\r\n    const decrypt = () =>\r\n    {\r\n        if(file !== '' && passkey !== 'Enter A Passkey') decryptFile(file, passkey);\r\n        else alert('Please provide a file and a passkey in order to decrypt!');\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <img src={ logo } className='logo' alt=\"logo\" />\r\n            <h1> Cipher </h1>\r\n            <div className=\"division\"><hr /></div>\r\n            <br /><br /><br />\r\n\r\n            <form onSubmit={ (event) => event.preventDefault() }>\r\n                <div>\r\n                    <label htmlFor=\"file\" id=\"file-label\">\r\n                        {\r\n                            file === ''\r\n                                ? 'Choose a File'\r\n                                : `${ filename.substring(0, 30) }${ (filename.length > 30) ? '...' : '' }`\r\n                        }\r\n                        <input type='file' id=\"file\" name=\"file\" onChange={ onFileChange } />\r\n                    </label>\r\n                    <br /><br /><br />\r\n\r\n                    <label id=\"passkey-label\" htmlFor=\"key\">\r\n                        Passkey :\r\n                        <input type='text' id=\"key\" name=\"key\" onChange={ onKeyChange } placeholder={ passkey } />\r\n                    </label>\r\n                </div>\r\n\r\n                <input type='button' value='Encrypt' onClick={ encrypt } />\r\n                <input type='button' value='Decrypt' onClick={ decrypt } />\r\n            </form>\r\n\r\n            <div className=\"instructions\">\r\n                <h2>Instructions:</h2>\r\n\r\n                <ol>\r\n                    <li>Select a file.</li>\r\n                    <li>Write any passkey to encrypt/decrypt the file against.</li>\r\n                    <li>Encrypt or Decrypt your file. It's that easy!</li>\r\n                </ol>\r\n\r\n                <p>Note: Only the passkey used to encrypt a file can be used to decrypt the same.</p>\r\n            </div>\r\n            <br />\r\n\r\n            No copyrights &#128521;\r\n        </>\r\n    );\r\n  };\r\n\r\n\r\nexport default Cipher;","\nimport Cipher from 'components/Cipher';\n\n\nconst App = () => {\n\n    return (\n      <div className=\"App\">\n        <Cipher />\n      </div>\n    );\n\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport reportWebVitals from 'reportWebVitals';\nimport 'index.css';\nimport App from 'App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}