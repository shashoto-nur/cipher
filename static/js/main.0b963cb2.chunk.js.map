{"version":3,"sources":["reportWebVitals.ts","utils/deriveKey.ts","utils/encryptFile.ts","utils/decryptFile.ts","components/Encryptor.tsx","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","deriveKey","passkey","a","window","crypto","subtle","importKey","TextEncoder","encode","passwordKey","key","getKey","console","log","message","alert","fileToByteArray","file","Promise","resolve","_reject","fileByteArray","reader","FileReader","readAsArrayBuffer","onloadend","event","target","readyState","DONE","arrayBuffer","result","Uint8Array","err","encryptData","fileArray","filenameArray","algorithm","name","iv","mergedArray","length","encrypt","encryptedMergedData","uint8MergedData","encryptedFilename","uint8Filename","stringFilename","String","fromCharCode","apply","slice","call","base64Filename","btoa","encryptFile","filename","encryptedData","binFile","Blob","type","saveAs","getFileData","onload","decryptData","decrypt","decryptedMergedArray","uint8MergedArray","border","fileData","TextDecoder","decode","decryptFile","decryptedData","originalFile","Encryptor","useState","setFile","setFilename","setPasskey","onSubmit","preventDefault","htmlFor","id","onChange","files","value","placeholder","onClick","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wKAceA,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,oDC8BCQ,EArCA,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,+EAKgBC,OAAOC,OAAOC,OAAOC,UACvC,OAAO,IAAIC,aAAcC,OAAOP,GAChC,CAAC,KAAQ,WAAW,EAAO,CAAC,cAP1B,cAKJQ,EALI,OAyBJC,EAdS,SAACD,GAEZ,OAAON,OAAOC,OAAOC,OAAOL,UACxB,CACI,KAAQ,SAAU,MAAQ,IAAIO,aAAcC,OAAO,QACnD,WAAc,IAAM,KAAQ,WAEhCC,EACA,CAAE,KAAQ,UAAW,OAAU,MAC/B,EACA,CAAE,UAAW,YAITE,CAAOF,GAzBT,kBA2BHC,GA3BG,gCA+BVE,QAAQC,IAAI,KAAIC,SAChBC,MAAM,yCAhCI,iEAAH,sDCGTC,EAAkB,SAACC,GAErB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAEzB,IAEI,IACIC,EADEC,EAAS,IAAIC,WAGnBD,EAAOE,kBAAkBP,GACzBK,EAAOG,UAAY,SAACC,GAEhB,GAAIA,EAAMC,QAAUD,EAAMC,OAAOC,aAAeL,WAAWM,KAC3D,CACI,IAAMC,EAAcJ,EAAMC,OAAOI,OACjCV,EAAgB,IAAIW,WAAWF,GAEnCX,EAAQE,IAGhB,MAAOY,GAEHrB,QAAQC,IAAIoB,EAAInB,SAChBC,MAAM,8CAMZmB,EAAW,uCAAG,WAAOC,EAAuBC,EAA2B1B,GAAzD,6BAAAR,EAAA,kEAKNmC,EAAY,CAAEC,KAAM,UAAWC,IAAI,IAAIhC,aAAcC,OAAO,0BAE5DgC,EAAc,IAAIR,WAAe,CAACI,EAAcK,QAAlC,mBAA8CL,GAA9C,YAAgED,KAPxE,KAQgBzB,GARhB,qCAQ6BP,OAAOC,OAAOC,OAAOqC,QAASL,EAAW3B,EAAK8B,GAR3E,6BAQNG,EARM,KASNC,EAAkB,IAAIZ,WAAWW,GAT3B,KAYcjC,GAZd,uCAY2BP,OAAOC,OAAOC,OAAOqC,QAASL,EAAW3B,EAAK0B,GAZzE,mCAYNS,EAZM,KAaNC,EAAgB,IAAId,WAAWa,GAC/BE,EAAiBC,OAAOC,aAAaC,MAAM,KAAM,GAAGC,MAAMC,KAAKN,IAC/DO,EAAiBC,KAAKP,GAfhB,kBAiBL,CAAEH,gBAAiBA,EAAkBS,eAAgBA,IAjBhD,kCAqBZzC,QAAQC,IAAI,KAAIC,SAChBC,MAAM,yCAtBM,kEAAH,0DAuDFwC,EA3BE,uCAAG,WAAOtC,EAAYuC,EAAkBvD,GAArC,SAAAC,EAAA,sDAEhB,IAEI,sBAAC,oCAAAA,EAAA,sEAEyBF,EAAUC,GAFnC,cAEaS,EAFb,gBAI+BM,EAAgBC,GAJ/C,cAIakB,EAJb,OAKaC,GAAgB,IAAI7B,aAAcC,OAAOgD,GALtD,SAMmCtB,EAAYC,EAAyBC,EAAe1B,GANvF,QAMa+C,EANb,UAUiBC,EAAU,IAAIC,KAAK,CAACF,EAAcb,iBAA8B,CAAEgB,KAAM,6BAC9EC,iBAAOH,EAAD,UAAcD,EAAcJ,kBAX7C,2CAAD,GAgBJ,MAAOpB,GAEHrB,QAAQC,IAAIoB,EAAInB,SAChBC,MAAM,yCAvBM,2CAAH,0DCzDX+C,EAAc,SAAC7C,GAEjB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAEzB,IAEI,IAAIE,EAAS,IAAIC,WACjBD,EAAOE,kBAAkBP,GACzBK,EAAOyC,OAAS,SAACrC,GAAYA,EAAMC,QAAUR,EAAQO,EAAMC,OAAOI,SAEtE,MAAOE,GAEHrB,QAAQC,IAAIoB,EAAInB,SAChBC,MAAM,8CAMZiD,EAAW,uCAAG,WAAOpB,EAA6BlC,GAApC,2BAAAR,EAAA,kEAKNmC,EAAY,CAAEC,KAAM,UAAWC,IAAI,IAAIhC,aAAcC,OAAO,0BALtD,KAOiBE,GAPjB,qCAO8BP,OAAOC,OAAOC,OAAO4D,QAAQ5B,EAAW3B,EAAKkC,GAP3E,+BAONsB,EAPM,8BAUFC,EAAmB,IAAInC,WAAWkC,GAClCE,EAASD,EAAiB,GAAK,EAE/B/B,EAAgB+B,EAAiBhB,MAAM,EAAGiB,GAC1CC,EAAWF,EAAiBhB,MAAMiB,EAAQD,EAAiB1B,QAC3De,GAAW,IAAIc,aAAcC,OAAOnC,GAflC,kBAiBD,CAAEiC,SAAUA,EAAWb,SAAUA,IAjBhC,0DAsBZ5C,QAAQC,IAAI,KAAIC,SAChBC,MAAM,yCAvBM,kEAAH,wDAuDFyD,EA1BE,uCAAG,WAAOvD,EAAYhB,GAAnB,SAAAC,EAAA,sDAEhB,IAEI,sBAAC,kCAAAA,EAAA,sEAEyBF,EAAUC,GAFnC,cAEaS,EAFb,gBAIqCoD,EAAY7C,GAJjD,cAIa2B,EAJb,gBAKmCoB,EAAYpB,EAA+BlC,GAL9E,QAKa+D,EALb,UAQiBC,EAAe,IAAIf,KAAM,CAACc,EAAcJ,WAC9CR,iBAAOa,EAAcD,EAAcjB,WAT9C,2CAAD,GAcJ,MAAOvB,GAEHrB,QAAQC,IAAIoB,EAAInB,SAChBC,MAAM,yCArBM,2CAAH,wD,OCgBF4D,EA/DG,WAEd,MAAwBC,mBAAoB,IAA5C,mBAAO3D,EAAP,KAAa4D,EAAb,KACA,EAAgCD,mBAAS,iBAAzC,mBAAOpB,EAAP,KAAiBsB,EAAjB,KACA,EAA8BF,mBAAS,mBAAvC,mBAAO3E,EAAP,KAAgB8E,EAAhB,KAsBA,OACI,qCACI,6CACA,uBAAM,uBAAM,uBAEZ,uBAAMC,SAAW,SAACtD,GAAD,OAAWA,EAAMuD,kBAAlC,UACI,gCACI,uBAAOC,QAAQ,OAAf,oBACA,uBAAOtB,KAAK,OAAOuB,GAAG,OAAO7C,KAAK,OAAO8C,SA5BpC,SAAC1D,GACrB,IAAD,IACImD,GAAa,OAALnD,QAAK,IAALA,GAAA,UAAAA,EAAOC,cAAP,eAAe0D,MAAO,IAAK3D,EAAMC,OAAO0D,MAAO,GAAK,IAC5DP,GAAiB,OAALpD,QAAK,IAALA,GAAA,UAAAA,EAAOC,cAAP,eAAe0D,MAAO,IAAK3D,EAAMC,OAAO0D,MAAO,GAAG/C,KAAO,kBA0BzD,uBAEA,uBAAO4C,QAAQ,MAAf,uBACF,uBAAOtB,KAAK,OAAOuB,GAAG,MAAM7C,KAAK,MAAM8C,SA1BjC,SAAC1D,GAAiDqD,EAAWrD,EAAMC,OAAO2D,QA0BhBC,YAActF,OAGhF,uBAAO2D,KAAK,SAAS0B,MAAM,UAAUE,QA3BjC,WAEA,KAATvE,GAA2B,oBAAZhB,EAA+BsD,EAAYtC,EAAMuC,EAAUvD,GACxEc,MAAM,+DAyBH,uBAAO6C,KAAK,SAAS0B,MAAM,UAAUE,QAtBjC,WAEA,KAATvE,GAA2B,oBAAZhB,EAA+BuE,EAAYvD,EAAMhB,GAC9Dc,MAAM,kEAsBP,uBAAM,uBAEN,+CACA,+BACI,gDACA,wFACA,0GAGJ,+GACA,uBA5BJ,iCCnBO0E,EAVH,WAER,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCCRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAO1BxG,M","file":"static/js/main.0b963cb2.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\n\r\nconst deriveKey = async (passkey: string) =>\r\n{\r\n    try\r\n    {\r\n        // Create a PBKDF2 \"key\" containing the password\r\n        const passwordKey = await window.crypto.subtle.importKey(\r\n                \"raw\", new TextEncoder().encode(passkey),\r\n                {\"name\": \"PBKDF2\"}, false, [\"deriveKey\"]\r\n        );\r\n\r\n        // Derive a key from the password key\r\n        const getKey = (passwordKey: CryptoKey) =>\r\n        {\r\n            return window.crypto.subtle.deriveKey(\r\n                {\r\n                    \"name\": \"PBKDF2\", \"salt\": new TextEncoder().encode('salt'),\r\n                    \"iterations\": 1000, \"hash\": 'SHA-256'\r\n                },\r\n                passwordKey,\r\n                { \"name\": \"AES-GCM\", \"length\": 128 },\r\n                true,\r\n                [ \"encrypt\", \"decrypt\" ]\r\n            );\r\n        };\r\n\r\n        const key = getKey(passwordKey);\r\n\r\n        return key;\r\n    }\r\n    catch (err)\r\n    {\r\n        console.log(err.message);\r\n        alert('An error occured! Please try again...');\r\n    };\r\n};\r\n\r\n\r\nexport default deriveKey;","import { saveAs } from 'file-saver';\r\nimport deriveKey from 'utils/deriveKey';\r\n\r\n\r\n// Get the byte array of the file before encrypting\r\nconst fileToByteArray = (file: File) =>\r\n{\r\n    return new Promise((resolve, _reject) =>\r\n    {\r\n        try\r\n        {\r\n            const reader = new FileReader();\r\n            let fileByteArray: Uint8Array;\r\n\r\n            reader.readAsArrayBuffer(file as Blob);\r\n            reader.onloadend = (event) =>\r\n            {\r\n                if (event.target && event.target.readyState === FileReader.DONE)\r\n                {\r\n                    const arrayBuffer = event.target.result;\r\n                    fileByteArray = new Uint8Array(arrayBuffer as ArrayBufferLike);\r\n                };\r\n                resolve(fileByteArray);\r\n            }\r\n        }\r\n        catch (err)\r\n        {\r\n            console.log(err.message);\r\n            alert('An error occured! Please try again...');\r\n        };\r\n    });\r\n};\r\n\r\n// Encrypt the merged array of file and filename\r\nconst encryptData = async (fileArray: Uint8Array, filenameArray: Uint8Array, key: CryptoKey | undefined) =>\r\n{\r\n    try\r\n    {\r\n        // The algorithm to encrypt the file using webcrtpto\r\n        const algorithm = { name: \"AES-GCM\", iv: new TextEncoder().encode(\"Initialization Vector\") };\r\n      \r\n        const mergedArray = new Uint8Array([...[filenameArray.length], ...filenameArray, ...fileArray]);\r\n        const encryptedMergedData = key && await window.crypto.subtle.encrypt( algorithm, key, mergedArray );\r\n        const uint8MergedData = new Uint8Array(encryptedMergedData as ArrayBufferLike);\r\n\r\n        // Give a unique name to the encrypted file (not important)\r\n        const encryptedFilename = key && await window.crypto.subtle.encrypt( algorithm, key, filenameArray );\r\n        const uint8Filename = new Uint8Array(encryptedFilename as ArrayBufferLike);\r\n        const stringFilename = String.fromCharCode.apply(null, [].slice.call(uint8Filename));\r\n        const base64Filename = btoa(stringFilename);\r\n\r\n        return { uint8MergedData: uint8MergedData!, base64Filename: base64Filename! };\r\n    }\r\n    catch (err)\r\n    {\r\n        console.log(err.message);\r\n        alert('An error occured! Please try again...');\r\n    };\r\n}\r\n\r\n\r\n// Encrypt the provided file along with its name\r\nconst encryptFile = async (file: File, filename: string, passkey: string) =>\r\n{\r\n    try\r\n    {\r\n        (async () =>\r\n            {\r\n                const key = await deriveKey(passkey);\r\n\r\n                const fileArray = await fileToByteArray(file);\r\n                const filenameArray = new TextEncoder().encode(filename);\r\n                const encryptedData = await encryptData(fileArray as Uint8Array, filenameArray, key);\r\n\r\n                if(encryptedData)\r\n                {\r\n                    const binFile = new Blob([encryptedData.uint8MergedData as BlobPart], { type: 'application/octet-stream' });\r\n                    saveAs(binFile, `${ encryptedData.base64Filename }`);\r\n                }\r\n            }\r\n        )();\r\n    }\r\n    catch (err)\r\n    {\r\n        console.log(err.message);\r\n        alert('An error occured! Please try again...');\r\n    };\r\n};\r\n\r\nexport default encryptFile;","import { saveAs } from 'file-saver';\r\nimport deriveKey from 'utils/deriveKey';\r\n\r\n\r\n// Get the binary file data\r\nconst getFileData = (file: File) =>\r\n{\r\n    return new Promise((resolve, _reject) =>\r\n    {\r\n        try\r\n        {\r\n            let reader = new FileReader();\r\n            reader.readAsArrayBuffer(file as Blob);\r\n            reader.onload = (event) => { event.target && resolve(event.target.result) };\r\n        }\r\n        catch (err)\r\n        {\r\n            console.log(err.message);\r\n            alert('An error occured! Please try again...');\r\n        };\r\n    });\r\n};\r\n\r\n// Decrypt the file and get the filename and file data\r\nconst decryptData = async (uint8MergedData: Uint8Array, key: CryptoKey | undefined) =>\r\n{\r\n    try\r\n    {\r\n        // The algorithm to encrypt the file using webcrtpto\r\n        const algorithm = { name: \"AES-GCM\", iv: new TextEncoder().encode(\"Initialization Vector\") };\r\n\r\n        const decryptedMergedArray = key && await window.crypto.subtle.decrypt(algorithm, key, uint8MergedData);\r\n\r\n        if(decryptedMergedArray) {\r\n            const uint8MergedArray = new Uint8Array(decryptedMergedArray);\r\n            const border = uint8MergedArray[0] + 1;\r\n\r\n            const filenameArray = uint8MergedArray.slice(1, border);\r\n            const fileData = uint8MergedArray.slice(border, uint8MergedArray.length);\r\n            const filename = new TextDecoder().decode(filenameArray);\r\n\r\n            return { fileData: fileData!, filename: filename! };\r\n        };\r\n    }\r\n    catch (err)\r\n    {\r\n        console.log(err.message);\r\n        alert('An error occured! Please try again...');\r\n    };\r\n};\r\n\r\n\r\n// Get the encrypted data, decrypt it and save it ints former state\r\nconst decryptFile = async (file: File, passkey: string) =>\r\n{\r\n    try\r\n    {\r\n        (async () =>\r\n            {\r\n                const key = await deriveKey(passkey);\r\n\r\n                const uint8MergedData = await getFileData(file);\r\n                const decryptedData = await decryptData(uint8MergedData as Uint8Array, key);\r\n\r\n                if(decryptedData) {\r\n                    const originalFile = new Blob( [decryptedData.fileData as BlobPart] );\r\n                    saveAs(originalFile, decryptedData.filename as string);\r\n                };\r\n            }\r\n        )();\r\n    }\r\n    catch (err)\r\n    {\r\n        console.log(err.message);\r\n        alert('An error occured! Please try again...');\r\n    };\r\n};\r\n\r\n\r\nexport default decryptFile;","import React, { useState } from 'react';\r\n\r\nimport encryptFile from 'utils/encryptFile';\r\nimport decryptFile from 'utils/decryptFile';\r\n\r\n\r\nconst Encryptor = () =>\r\n  {\r\n    const [file, setFile] = useState<\"\" | File>('');\r\n    const [filename, setFilename] = useState('Choose A File');\r\n    const [passkey, setPasskey] = useState('Enter A Passkey');\r\n\r\n    const onFileChange = (event: React.ChangeEvent<HTMLInputElement>) =>\r\n    {\r\n        setFile(event?.target?.files![0] ? event.target.files![0] : '');\r\n        setFilename(event?.target?.files![0] ? event.target.files![0].name : 'Choose File');\r\n    };\r\n\r\n    const onKeyChange = (event: React.ChangeEvent<HTMLInputElement>) => { setPasskey(event.target.value); };\r\n\r\n    const encrypt = () =>\r\n    {\r\n        if(file !== '' && passkey !== 'Enter A Passkey') encryptFile(file, filename, passkey);\r\n        else alert('Please provide a file and a passkey in order to encrypt!');\r\n    };\r\n\r\n    const decrypt = () =>\r\n    {\r\n        if(file !== '' && passkey !== 'Enter A Passkey') decryptFile(file, passkey);\r\n        else alert('Please provide a file and a passkey in order to decrypt!');\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h1> Encryptor </h1>\r\n            <br /><hr /><br />\r\n\r\n            <form onSubmit={ (event) => event.preventDefault() }>\r\n                <div>\r\n                    <label htmlFor=\"file\">File: </label>\r\n                    <input type='file' id=\"file\" name=\"file\" onChange={ onFileChange } />\r\n                    <br />\r\n\r\n                    <label htmlFor=\"key\">Passkey: </label>\r\n                  <input type='text' id=\"key\" name=\"key\" onChange={ onKeyChange } placeholder={ passkey } />\r\n                </div>\r\n\r\n                <input type='button' value='Encrypt' onClick={ encrypt } />\r\n                <input type='button' value='Decrypt' onClick={ decrypt } />\r\n            </form>\r\n\r\n            <br /><br />\r\n\r\n            <h3>Instructions:</h3>\r\n            <ol>\r\n                <li>Select a file.</li>\r\n                <li>Write any passkey to encrypt/decrypt the file against.</li>\r\n                <li>Press any of the button to perform the operation you wish to perform.</li>\r\n            </ol>\r\n\r\n            <p>Note: Only the passkey used to encrypt a file can be used to decrypt the same.</p>\r\n            <br />\r\n\r\n            No copyrights &#128521;\r\n        </>\r\n    );\r\n  };\r\n\r\n\r\nexport default Encryptor;","\nimport Encryptor from 'components/Encryptor';\n\n\nconst App = () => {\n\n    return (\n      <div className=\"App\">\n        <Encryptor />\n      </div>\n    );\n\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport reportWebVitals from 'reportWebVitals';\n\nimport 'index.css';\nimport App from 'App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}